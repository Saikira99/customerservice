spring.application.name=customerservice
server.port=8081

# ------------------------
# PostgreSQL Configuration
# ------------------------
# 1) We reference "DATABASE_URL" from the environment.
# 2) We add "jdbc:" in front, because Railway's DATABASE_URL starts with "postgresql://".
# 3) We provide a fallback to "postgresql://localhost:5432/customer_service" for local dev if you run "mvn spring-boot:run" without Docker Compose.

spring.datasource.url=jdbc:${DATABASE_URL:postgresql://localhost:5432/customer_service}
spring.datasource.username=${PGUSER:postgres}
spring.datasource.password=${PGPASSWORD:12345}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ------------------------
# Spring Mail Configuration
# ------------------------
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USER:temperory789@gmail.com}
spring.mail.password=${MAIL_PASS:ufwwsufczxhmkqsi}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# ------------------------
# Apache Kafka Producer Settings
# ------------------------
spring.kafka.bootstrap-servers=${KAFKA_SERVER:localhost:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
